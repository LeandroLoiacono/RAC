#:kivy 2.0.0
<RacXY>:
  cols: 3
  Button:
    id: ul_but
    on_press: app.move_relative(-1,1)
    canvas:
      Triangle: 
        points: (self.x + self.width / 4, self.y + self.height / 4, self.center_x - self.width / 4, self.center_y + self.height / 4, self.x + self.width - self.width / 4, self.y + self.height *  3/4)
  Button:
    id: u_but
    on_press: app.move_relative(0,1)
    canvas:
      Triangle: 
        points: (self.x + self.width / 4, self.y + self.height / 4, self.center_x, self.center_y + self.height / 4, self.center_x + self.width / 4,  self.y + self.height / 4)
  Button:
    id: ur_but
    on_press: app.move_relative(1,1)
    canvas:
      Triangle: 
        points: (self.x + self.width / 4, self.center_y + self.height / 4, self.center_x + self.width / 4, self.center_y + self.height / 4, self.center_x + self.width / 4, self.y + self.height / 4)
  Button:
    id: l_but
    on_press: app.move_relative(-1)
    canvas:
      Triangle: 
        points: (self.x + self.width / 4, self.center_y, self.center_x + self.width / 4, self.center_y + self.height / 4, self.center_x + self.width / 4,  self.y + self.height / 4)
  Button:
    id: m_but
    text: 'HOME XY'
    on_press: app.home(1,1)
  Button:
    id: r_but
    on_press: app.move_relative(1)
    canvas:
      Triangle: 
        points: (self.x + self.width / 4, self.y + self.height / 4, self.x + self.width / 4, self.center_y + self.height / 4, self.center_x + self.width / 4,  self.center_y)
  Button:
    id: dl_but
    on_press: app.move_relative(-1,-1)
    canvas:
      Triangle: 
        points: (self.x + self.width / 4, self.y + self.height / 4, self.x + self.width / 4, self.center_y + self.height / 4, self.center_x + self.width / 4, self.y + self.height / 4)
  Button:
    id: d_but
    on_press: app.move_relative(0,-1)
    canvas:
      Triangle: 
        points: (self.center_x, self.y + self.height / 4, self.x + self.width / 4, self.center_y + self.height / 4,self.center_x + self.width / 4, self.center_y + self.height / 4)
  Button:
    id: dr_but
    on_press: app.move_relative(1,-1)
    canvas:
      Triangle: 
        points: (self.x + self.width / 4, self.y + self.height / 4, self.center_x + self.width / 4, self.center_y + self.height / 4, self.center_x + self.width / 4, self.y + self.height / 4)

<RacZ>:
  cols: 3
  Button:
    disabled: True
  Button:
    id: 'uz_but'
    on_press: app.move_relative(0,0,1)
    canvas:
      Triangle: 
        points: (self.x + self.width / 4, self.y + self.height / 4, self.center_x, self.center_y + self.height / 4, self.center_x + self.width / 4,  self.y + self.height / 4)
  Button:
    disabled: True
  Button:
    id: 'le_but'
    text: 'E--'
    on_press: app.move_relative(0,0,0,-1)
  GridLayout:
    rows: 2
    Button:
      id: 'hz_but'
      text: 'HOME Z'
      on_press: app.home(0,0,1)
    Button:
      id: 'he_but'
      text: 'HOME E'
      on_press: app.home(0,0,0,1)
  Button:
    id: 're_but'
    text: 'E++'
    on_press: app.move_relative(0,0,0,1)
  Button:
    disabled: True
  Button:
    id: 'dz_but'
    on_press: app.move_relative(0,0,-1)
    canvas:
      Triangle: 
        points: (self.center_x, self.y + self.height / 4, self.x + self.width / 4, self.center_y + self.height / 4,self.center_x + self.width / 4, self.center_y + self.height / 4)
  Button:
    disabled: True

<Rac>:
  orientation: 'lr-tb'
  spacing: 20
  Label:
    id: Header_lbl
    text: 'Robot Arm Controller'
    size_hint_x: 1
    size_hint_y: 0.1
  BoxLayout:
    size_hint_x: 0.5
    size_hint_y: 0.9
    orientation: 'vertical'
    spacing: 20
    BoxLayout:
      size_hint_y: 0.8
      orientation: 'horizontal'
      spacing: 20
      RacXY:
        size_hint_x: 0.5
      RacZ:
        size_hint_x: 0.5
    BoxLayout:
      orientation: 'horizontal'
      size_hint_y: 0.2
      spacing: 20
      Button:
        id: home_but
        text: 'AUTO HOME'
        on_press: app.home(1,1,1,1)
      ToggleButton:
        id: motors_tgl
        text: 'Motors Enabled'
        state: app.motorsToggleState
        on_press: app.toggleMotors(self)
      ToggleButton:
        id: grpper_tgl
        text: 'Toggle Gripper'
        on_press: app.toggleGripper(self)
      Spinner:
        id: step_spinner
        text: str(app.step)
        values: '0.1', '1', '10', '50'
        on_text: app.setStep(self.text)
    Label:
      id: Feed Rate_lbl
      text: 'Feed Rate (Speed): ' + str(app.f)
      size_hint_y: None
      height: '20sp'
    Slider:
      id: f_slider
      min: 0
      max: app.maxSpeed 
      step: 1 if app.firmware == 'Community' else 10
      value: app.f
      size_hint_y: None
      height: '20sp'
      on_touch_up: app.setFeedRate(self.value) 
    Label:
      id: File_lbl
      text: 'G-CODE FILE'
    FileChooserListView :
    #FileChooserIconView:
      id: filechooser
      on_selection: app.gcodeFile = self.selection and self.selection[0] or ''; run_btn.disabled = app.gcodeFile == ''
      filters: ['*.gcode']
    Button:
      id: run_btn
      text: 'Run G-Code File'
      disabled: True
      on_press: app.runFile()
  BoxLayout:
    size_hint_x: 0.5
    size_hint_y: 1
    orientation: 'vertical'
    BoxLayout:
      orientation: 'horizontal'
      size_hint_y: None
      height: '30sp'
      Label:
        id: port_lbl
        text: 'COM Port'
        size_hint_x: 0.2
      Label:
        id: g_code_lbl
        text: 'Custom G-Code'
        size_hint_x: 0.8
    BoxLayout:
      orientation: 'horizontal'
      size_hint_y: None
      height: '30sp'
      Spinner:
        id: port_spinner
        text: str(app.port)
        values: (app.ports_available,) 
        on_text: app.setPort(self.text)
        size_hint_x: 0.2
      Button:
        text: 'search COM'
        on_press: app.checkPorts()
        size_hint_x: 0.1
      TextInput:
        id: gcode_txt
        multiline: False
        size_hint_x: 0.5
        on_text_validate: app.send_gcode(self)
      Button:
        id: gcode_btn
        text: 'Send'
        size_hint_x: 0.2
        on_press: app.send_gcode(gcode_txt)
    BoxLayout:
      orientation: 'horizontal'
      size_hint_y: None
      height: '30sp'
      ToggleButton:
        id: wait_ok_tgl
        text: 'Wait for OK'
        state: 'down' if app.wait_for_ok else 'normal'
        on_press: app.toggleWaitOK(self)
        #size_hint_x: 0.5
      Spinner:
        id: fw_spinner
        text: str(app.firmware)
        values: 'Community', 'Marlin'
        on_text: app.setFirmware(self.text)
        #size_hint_x: 0.5
    BoxLayout:
      orientation: 'horizontal'
      size_hint_y: None
      height: '30sp'
      Label:
        id: Console_lbl
        text: 'Console'
        size_hint_x: 0.8
      Button:
        id: Console_clear_btn
        text: 'Clear'
        on_press: Console_txt.text = ''
        size_hint_x: 0.2
    TextInput:
      id: Console_txt
      multiline: True
      size_hint_y: 0.2
      text: ''